import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'dev.architectury.loom' version '1.3-SNAPSHOT'

    // Vineflower is a fork of the FernFlower decompiler which contains many enhancements and bug fixes, and generally
    // produces much better source code. The Minecraft sources can be decompiled using it with the
    // "genSourcesWithVineflower" task.
    // (Note: Quiltflower was renamed to Vineflower in early July 2023.)
    id 'io.github.juuxel.loom-vineflower' version '1.11.0'

    // This dependency is only used to determine the state of the Git working tree so that build artifacts can be
    // more easily identified. TODO: Lazily load GrGit via a service only when builds are performed.
    id 'org.ajoberstar.grgit' version '5.0.0'

    // Mixin config plugin is a subproject for creating lithium's settings from annotations in each mixin package.
    id 'net.caffeinemc.mixin-config-plugin' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

apply from: "${rootProject.projectDir}/gradle/fabric.gradle"
apply from: "${rootProject.projectDir}/gradle/java.gradle"

apply plugin: 'net.caffeinemc.mixin-config-plugin'

loom {
    accessWidenerPath = file("src/main/resources/lithium.accesswidener")
    mixin.defaultRefmapName = "mixins.lithium.refmap.json"

    forge {
        convertAccessWideners = true

        mixinConfig "lithium.mixins.json"
    }
}

group = project.maven_group
version = "${project.mod_version}${getVersionMetadata()}"
archivesBaseName = "${project.name}-mc${project.minecraft_version}"

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set "api-dev"

    from sourceSets.api.output
}

tasks.register('remapApiJar', RemapJarTask) {
    dependsOn apiJar
    archiveClassifier.set("api")

    input = apiJar.archiveFile.get().asFile
    addNestedDependencies = false
}

build.dependsOn remapApiJar

jar {
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
}

loom {
    runs {
        configureEach {
            mods {
                radium {
                    sourceSet sourceSets.main
                    sourceSet sourceSets.api
                }
            }
        }
    }
}

repositories {
    allprojects {
        repositories {
            maven { url 'https://jitpack.io' }
            maven { url "https://maven.su5ed.dev/releases" }
            maven { url "https://repo.constructlegacy.ru/public" }
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    forge "net.minecraftforge:forge:${project.loader_version}"
    modCompileOnly "dev.su5ed.sinytra.fabric-api:fabric-transfer-api-v1:${project.fabric_version}" // Ye

    compileOnly 'net.caffeinemc:mixin-config-plugin:1.0-SNAPSHOT'

    implementation(forgeRuntimeLibrary(include("com.github.dima_dencep.mods:NanoLiveConfig:1.2.1") {
        exclude(group: "dev.su5ed.sinytra.fabric-api")
    }))
}

createMixinConfig {
    inputFiles = file(compileJava.getDestinationDirectory())
    includeFiles = file("src/main/java/me/jellysquid/mods/lithium")
    outputDirectory = file("src/main/resources/assets/lithium/")
    outputDirectoryForSummaryDocument = file(".")
    mixinParentPackage = "me.jellysquid.mods.lithium"
    modShortName = "Lithium"
}

jar.dependsOn createMixinConfig
processResources.dependsOn createMixinConfig
createMixinConfig.dependsOn compileJava

def getVersionMetadata() {
    // CI builds only
    if (project.hasProperty("build.release")) {
        return "" // no tag whatsoever
    }

//    if (grgit != null) {
//        def head = grgit.head()
//        def id = head.abbreviatedId
//
//        // Flag the build if the build tree is not clean
//        if (!grgit.status().clean) {
//            id += "-dirty"
//        }
//
//        return "+git.${id}"
//    }

    // No tracking information could be found about the build
    return "+zyczu0"
}

//make builds more reproducible
tasks.withType(AbstractArchiveTask) {
    reproducibleFileOrder = true
    preserveFileTimestamps = false
}

//Mixin hotswap
/*
afterEvaluate {
    loom.runs.configureEach {
        // https://fabricmc.net/wiki/tutorial:mixin_hotswaps
        vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
    }
}
*/

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact(apiJar)
            artifact(remapApiJar)
        }
    }

    // select the repositories you want to publish to
    repositories {
        maven {
            name = "Redlance"
            url = "https://repo.redlance.org/public"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}
